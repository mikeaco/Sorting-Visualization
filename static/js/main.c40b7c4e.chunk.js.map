{"version":3,"sources":["Component/Algorithms.js","Component/ToolBar.js","Component/SortVis.js","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","left","right","animate","mid","Math","floor","arr","range1","range2","L","Array","fill","R","i","j","x","y","z","comp","push","over","merge","heapSort","size","length","percolateDown","createHeap","swap","temp","root","max","l","r","ToolBar","props","handleSizeChange","e","upSize","target","value","isRunning","resetColor","handleSpeedChange","setState","speed","console","log","state","this","keepArray","slice","UpIsRunning","sorted","minIndex","Algorithms","a","arrbars","document","getElementsByClassName","sleep","getSpeed","style","backgroundColor","height","anim","quickSort","piv","part","track","partition","tempC","className","position","top","fontFamily","type","min","onChange","step","width","onClick","SelectionSort","margin","HeapSort","MergeSort","QuickSort","React","Component","ms","Promise","resolve","setTimeout","SortVis","updateRunning","run","updateSize","createArray","reset","ret","wid","window","screen","key","resetArray","random","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c40b7c4e.chunk.js","sourcesContent":["\r\nexport const mergeSort = (array, left, right, animate) => {\r\n    if (left < right) {\r\n        let mid = Math.floor((left + (right - 1)) / 2);\r\n\r\n        mergeSort(array, left, mid, animate);\r\n        mergeSort(array, mid + 1, right, animate);\r\n        merge(array, left, mid, right, animate);\r\n    }\r\n    return array;\r\n};\r\n\r\nfunction merge(arr, left, mid, right, animate) {\r\n    let range1 = mid - left + 1;\r\n    let range2 = right - mid;\r\n\r\n    let L = new Array(range1).fill(0);\r\n    let R = new Array(range2).fill(0);\r\n    for (let i = 0; i < range1; i++) {\r\n        L[i] = arr[left + i];\r\n    }\r\n\r\n    for (let j = 0; j < range2; j++) {\r\n        R[j] = arr[mid + 1 + j]\r\n    }\r\n    let x = 0;\r\n    let y = 0;\r\n    let z = left;\r\n    while (x < range1 && y < range2) {\r\n        let comp = [left + x, mid + 1 + y, 0];\r\n        animate.push(comp);\r\n        if (L[x] <= R[y]) {\r\n            let over = [L[x], z, 1];\r\n            animate.push(over);\r\n            arr[z] = L[x];\r\n            x += 1;\r\n        }\r\n        else {\r\n            let over = [R[y], z, 1];\r\n            animate.push(over);\r\n            arr[z] = R[y];\r\n            y += 1;\r\n        }\r\n        z += 1;\r\n    }\r\n    while (x < range1) {\r\n        let over = [L[x], z, 1];\r\n        animate.push(over);\r\n        arr[z] = L[x];\r\n        x += 1;\r\n        z += 1;\r\n    }\r\n    while (y < range2) {\r\n        let over = [R[y], z, 1];\r\n        animate.push(over);\r\n        arr[z] = R[y];\r\n        y += 1;\r\n        z += 1;\r\n    }\r\n\r\n}\r\nexport const selectionSort = (array, animate) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n        let minIndex = i;\r\n        for (let j = i; j < array.length; j++) {\r\n            let comp = [minIndex, j, 0];\r\n            animate.push(comp);\r\n            if (array[minIndex] > array[j]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        let swap = [minIndex, i, 1];\r\n        animate.push(swap);\r\n        let temp = array[minIndex];\r\n        array[minIndex] = array[i];\r\n        array[i] = temp;\r\n    }\r\n    return array;\r\n}\r\nexport const quickSort = (array, left, right, animate) => {\r\n    if (left < right) {\r\n        let piv = partition(array, left, right, animate);\r\n        quickSort(array, left, piv - 1, animate);\r\n        quickSort(array, piv + 1, right, animate);\r\n\r\n    }\r\n    else if (left === right) {\r\n        let swap = [left, right, 3];\r\n        animate.push(swap);\r\n    }\r\n    \r\n    return array;\r\n}\r\n\r\nfunction partition(array, left, right, animate) {\r\n    let piv = right;\r\n    let part = [piv, 0, 2];\r\n    animate.push(part);\r\n    let i = left - 1;\r\n    for (let j = left; j < right; j++) {\r\n        let track = [i + 1, j, 0];\r\n        animate.push(track);\r\n        if (array[piv] >= array[j]) {\r\n            i++;\r\n            let swap = [i, j, 1];\r\n            animate.push(swap);\r\n            let temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n\r\n        }\r\n    }\r\n    i++;\r\n    let swap = [piv, i, 3];\r\n    animate.push(swap);\r\n    let temp = array[piv];\r\n    array[piv] = array[i];\r\n    array[i] = temp;\r\n    piv = i;\r\n    return piv;\r\n\r\n}\r\nexport const heapSort = (array, animate) => {\r\n    let size = array.length;\r\n    createHeap(array, size, animate);\r\n    for (let i = size - 1; i > 0; i--) {\r\n\r\n        let swap = [0, i, 2];\r\n        animate.push(swap);\r\n        let temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n\r\n        percolateDown(array, i, 0, animate);\r\n    }\r\n    let swap = [0, 0, 2];\r\n    animate.push(swap);\r\n    return array;\r\n\r\n}\r\nfunction createHeap(array, size, animate) {\r\n    for (let i = Math.floor(size / 2) - 1; i >= 0; i--) {\r\n        percolateDown(array, size, i, animate);\r\n    }\r\n\r\n}\r\nfunction percolateDown(array, size, root, animate) {\r\n    let max = root;\r\n    let l = 2 * root + 1;\r\n    let r = 2 * root + 2;\r\n    if (l < size) {\r\n        let comp = [l, max, 0];\r\n        animate.push(comp);\r\n    }\r\n    if (l < size && array[l] > array[max])\r\n        max = l;\r\n    if (r < size) {\r\n        let comp = [r, max, 0];\r\n        animate.push(comp);\r\n    }\r\n    if (r < size && array[r] > array[max])\r\n        max = r;\r\n    if (max !== root) {\r\n        \r\n        let swap = [root, max, 1];\r\n        animate.push(swap);\r\n        let temp = array[root];\r\n        array[root] = array[max];\r\n        array[max] = temp;\r\n        percolateDown(array, size, max, animate);\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './ToolBar.css'\r\nimport * as Algorithms from './Algorithms.js'\r\nimport './SortVis'\r\n//import SortVis from './SortVis'\r\nexport default class ToolBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            speed: 50\r\n        }\r\n    }\r\n    SelectionSort() {\r\n        if (!this.props.isRunning) {\r\n            resetColor();\r\n            var keepArray = this.props.array.slice();\r\n            this.props.UpIsRunning(keepArray, true);\r\n            var animate = [];\r\n            //const javaSorted = this.props.array.slice().sort((a, b) => (a - b));\r\n            const sorted = Algorithms.selectionSort(this.props.array, animate);\r\n            const anim = async () => {\r\n                for (let i = 0; i < animate.length; i++) {\r\n                    const arrbars = document.getElementsByClassName('bar');\r\n                    if (animate[i][2] === 0) {\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                    }\r\n                    else {\r\n                        let temp = arrbars[animate[i][1]].style.height;\r\n                        arrbars[animate[i][1]].style.height = arrbars[animate[i][0]].style.height;\r\n                        arrbars[animate[i][0]].style.height = temp;\r\n\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'pink';\r\n                    }\r\n                }\r\n                this.props.UpIsRunning(sorted, false);\r\n            }\r\n            anim();\r\n        }\r\n    }\r\n    HeapSort() {\r\n        if (!this.props.isRunning) {\r\n            resetColor();\r\n            var keepArray = this.props.array.slice();\r\n            this.props.UpIsRunning(keepArray, true);\r\n            var animate = [];\r\n            //const javaSorted = this.props.array.slice().sort((a, b) => (a - b));\r\n            const sorted = Algorithms.heapSort(this.props.array, animate);\r\n\r\n\r\n            const anim = async () => {\r\n                const arrbars = document.getElementsByClassName('bar');\r\n                for (let i = 0; i < animate.length; i++) {\r\n\r\n                    if (animate[i][2] === 0) {\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                    }\r\n                    else if (animate[i][2] === 1) {\r\n                        let temp = arrbars[animate[i][1]].style.height;\r\n                        arrbars[animate[i][1]].style.height = arrbars[animate[i][0]].style.height;\r\n                        arrbars[animate[i][0]].style.height = temp;\r\n\r\n                    }\r\n                    else {\r\n                        let temp = arrbars[animate[i][1]].style.height;\r\n                        arrbars[animate[i][1]].style.height = arrbars[animate[i][0]].style.height;\r\n                        arrbars[animate[i][0]].style.height = temp;\r\n\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'pink';\r\n\r\n                    }\r\n                }\r\n\r\n                this.props.UpIsRunning(sorted, false);\r\n            }\r\n            anim();\r\n\r\n        }\r\n    }\r\n    MergeSort() {\r\n        if (!this.props.isRunning) {\r\n            resetColor();\r\n            var keepArray = this.props.array.slice();\r\n            this.props.UpIsRunning(keepArray, true);\r\n            var animate = [];\r\n            //const javaSorted = this.props.array.slice().sort((a, b) => (a - b));\r\n            const sorted = Algorithms.mergeSort(this.props.array, 0, this.props.array.length - 1, animate);\r\n            const anim = async () => {\r\n                const arrbars = document.getElementsByClassName('bar');\r\n                for (let i = 0; i < animate.length; i++) {\r\n\r\n                    if (animate[i][2] === 0) {\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                    }\r\n                    else {\r\n                        arrbars[animate[i][1]].style.height = `${animate[i][0]}px`;\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(97, 212, 76)';\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n\r\n                    }\r\n                }\r\n                for (let i = 0; i < arrbars.length; i++) {\r\n                    arrbars[i].style.backgroundColor = 'pink';\r\n                }\r\n                this.props.UpIsRunning(sorted, false);\r\n            }\r\n            anim();\r\n\r\n\r\n        }\r\n\r\n    }\r\n    QuickSort() {\r\n        if (!this.props.isRunning) {\r\n            resetColor();\r\n            var keepArray = this.props.array.slice();\r\n            this.props.UpIsRunning(keepArray, true);\r\n            var animate = [];\r\n            //const javaSorted = this.props.array.slice().sort((a, b) => (a - b));\r\n            const sorted = Algorithms.quickSort(this.props.array, 0, this.props.array.length - 1, animate);\r\n            const anim = async () => {\r\n                for (let i = 0; i < animate.length; i++) {\r\n                    const arrbars = document.getElementsByClassName('bar');\r\n                    if (animate[i][2] === 0) {\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(245,117,88)';\r\n                        await sleep(getSpeed(this.state.speed));\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'rgb(163, 241, 225)';\r\n                    }\r\n                    else if (animate[i][2] === 1) {\r\n                        let temp = arrbars[animate[i][1]].style.height;\r\n                        arrbars[animate[i][1]].style.height = arrbars[animate[i][0]].style.height;\r\n                        arrbars[animate[i][0]].style.height = temp;\r\n                    }\r\n                    else if (animate[i][2] === 2) {\r\n                        arrbars[animate[i][0]].style.backgroundColor = 'yellow';\r\n                    }\r\n                    else {\r\n                        let temp = arrbars[animate[i][1]].style.height;\r\n                        let tempC = arrbars[animate[i][1]].style.backgroundColor;\r\n                        arrbars[animate[i][1]].style.height = arrbars[animate[i][0]].style.height;\r\n                        arrbars[animate[i][1]].style.backgroundColor = arrbars[animate[i][0]].style.backgroundColor;\r\n                        arrbars[animate[i][0]].style.height = temp;\r\n                        arrbars[animate[i][0]].style.backgroundColor = tempC;\r\n\r\n                        arrbars[animate[i][1]].style.backgroundColor = 'pink';\r\n                    }\r\n                }\r\n                this.props.UpIsRunning(sorted, false);\r\n            }\r\n            anim();\r\n\r\n\r\n        }\r\n    }\r\n    handleSizeChange = (e) => { this.props.upSize(e.target.value);  if(!this.props.isRunning){ resetColor()}; };\r\n    handleSpeedChange = (e) => {\r\n        this.setState({ speed: (e.target.value) })\r\n\r\n    };\r\n    render() {\r\n        return (\r\n            <div className=\"toolbar\">\r\n                <br></br>\r\n                <br></br>\r\n                <div style={{ position: `fixed`, left: `150px`, top: `30px`, fontFamily: 'Comic Sans MS' }}>Speed</div>\r\n                <div className=\"speed\">\r\n                    <input type=\"range\" min={1} max={95} value={this.state.speed} onChange={this.handleSpeedChange} />\r\n                </div>\r\n                <div style={{ position: `fixed`, left: `350px`, top: `30px`, fontFamily: 'Comic Sans MS' }}>Size</div>\r\n                <div className=\"size\">\r\n                    <input type=\"range\" min={5} max={300} step={11} value={this.props.array.length} onChange={this.handleSizeChange} />\r\n                </div>\r\n                <div style={{ height: `20vh`, width: `5px`, position: `fixed`, top: `0`, left: `500px`, backgroundColor: `rgb(105,82,199)` }}></div>\r\n                <div className=\"buttons\">\r\n                    <button onClick={() => this.SelectionSort()} style={{ margin: `40px`, fontFamily: 'Comic Sans MS' }}>SelectionSort</button>\r\n                    <button onClick={() => this.HeapSort()} style={{ margin: `40px`, fontFamily: 'Comic Sans MS' }}>HeapSort</button>\r\n                    <button onClick={() => this.MergeSort()} style={{ margin: `40px`, fontFamily: 'Comic Sans MS' }}>MergeSort</button>\r\n                    <button onClick={() => this.QuickSort()} style={{ margin: `40px`, fontFamily: 'Comic Sans MS' }}>QuickSort</button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n/*function arrayEqual(first, second) {\r\n    if (first.length !== second.length) {\r\n        return false;\r\n    }\r\n    else {\r\n        for (let i = 0; i < first.length; i++) {\r\n            if (first[i] != second[i]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}*/\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nfunction resetColor() {\r\n    const arrbars = document.getElementsByClassName('bar');\r\n    for (let i = 0; i < arrbars.length; i++) {\r\n        arrbars[i].style.backgroundColor = 'rgb(163, 241, 225)';\r\n    }\r\n}\r\nfunction getSpeed(speed) {\r\n    return 500 - (500 * (speed / 100));\r\n}","import React from 'react'\r\nimport './SortVis.css'\r\nimport ToolBar from './ToolBar';\r\nexport default class SortVis extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            arr: []\r\n            , isRunning: false\r\n        };\r\n    }\r\n    updateRunning = async (keepArray, run) => {\r\n        this.setState({\r\n            arr: keepArray,\r\n            isRunning: run\r\n        })\r\n\r\n    };\r\n    updateSize = async (size) => {\r\n        if (!this.state.isRunning) {\r\n            this.setState({\r\n                arr: createArray(size)\r\n            })\r\n        }\r\n\r\n    };\r\n    componentDidMount() {\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.setState({\r\n            arr: createArray(100)\r\n        });\r\n    }\r\n    resetArray() {\r\n        if (!this.state.isRunning) {\r\n            this.setState({\r\n                arr: createArray(this.state.arr.length)\r\n            });\r\n        }\r\n        const arrbars = document.getElementsByClassName('bar');\r\n        for (let i = 0; i < arrbars.length; i++) {\r\n            arrbars[i].style.backgroundColor = 'rgb(163, 241, 225)';\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const arr = this.state.arr;\r\n        const ret = [];\r\n        const wid = (window.screen.width);\r\n        for (let i = 0; i < arr.length; i++) {\r\n            ret.push(\r\n                <div className=\"bar\" key={i} style={{ height: `${arr[i]}px`, width: `${wid / arr.length}px` }}>\r\n                </div>\r\n            )\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\" >\r\n                <div style={{ height: `720px` }}></div>\r\n                {ret}\r\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <ToolBar array={this.state.arr} UpIsRunning={this.updateRunning} isRunning={this.state.isRunning} upSize = {this.updateSize} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction createArray(size) {\r\n    const arr = [];\r\n    for (let i = 0; i < size; i++) {\r\n        arr.push(randomInt(5, 300));\r\n    }\r\n    return arr;\r\n}\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SortVis from './Component/SortVis'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortVis></SortVis>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}